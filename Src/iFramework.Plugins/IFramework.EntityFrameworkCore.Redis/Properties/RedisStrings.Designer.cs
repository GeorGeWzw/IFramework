// <auto-generated />

using System;
using System.Reflection;
using System.Resources;
using System.Diagnostics.CodeAnalysis;
using System.Threading;
using JetBrains.Annotations;
using Microsoft.EntityFrameworkCore.Diagnostics;
using Microsoft.Extensions.Logging;

namespace IFramework.EntityFrameworkCore.Redis.Properties
{
    /// <summary>
    ///     <para>
    ///		    String resources used in EF exceptions, etc.
    ///     </para>
    ///     <para>
    ///		    These strings are exposed publicly for use by database providers and extensions.
    ///         It is unusual for application code to need these strings.
    ///     </para>
    /// </summary>
    public static class RedisStrings
    {
        private static readonly ResourceManager _resourceManager
            = new ResourceManager("IFramework.EntityFrameworkCore.Redis.Properties.RedisStrings", typeof(RedisStrings).GetTypeInfo().Assembly);

        private static string GetString(string name, params string[] formatterNames)
        {
            var value = _resourceManager.GetString(name);
            for (var i = 0; i < formatterNames.Length; i++)
            {
                value = value.Replace("{" + formatterNames[i] + "}", "{" + i + "}");
            }

            return value;
        }
    }
}

namespace IFramework.EntityFrameworkCore.Redis.Properties.Internal
{
    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public static class RedisResources
    {
        private static readonly ResourceManager _resourceManager
            = new ResourceManager("IFramework.EntityFrameworkCore.Redis.Properties.RedisStrings", typeof(RedisResources).GetTypeInfo().Assembly);

        /// <summary>
        ///     Saved {count} entities to redis store.
        /// </summary>
        public static EventDefinition<int> LogSavedChanges([NotNull] IDiagnosticsLogger logger)
        {
            var definition = ((Diagnostics.Internal.RedisLoggingDefinitions)logger.Definitions).LogSavedChanges;
            if (definition == null)
            {
                definition = LazyInitializer.EnsureInitialized<EventDefinitionBase>(
                    ref ((Diagnostics.Internal.RedisLoggingDefinitions)logger.Definitions).LogSavedChanges,
                    () => new EventDefinition<int>(
                        logger.Options,
                        RedisEventId.ChangesSaved,
                        LogLevel.Information,
                        "RedisEventId.ChangesSaved",
                        level => LoggerMessage.Define<int>(
                            level,
                            RedisEventId.ChangesSaved,
                            _resourceManager.GetString("LogSavedChanges"))));
            }

            return (EventDefinition<int>)definition;
        }

        /// <summary>
        ///     Transactions are not supported by the redis store.
        /// </summary>
        public static EventDefinition LogTransactionsNotSupported([NotNull] IDiagnosticsLogger logger)
        {
            var definition = ((Diagnostics.Internal.RedisLoggingDefinitions)logger.Definitions).LogTransactionsNotSupported;
            if (definition == null)
            {
                definition = LazyInitializer.EnsureInitialized<EventDefinitionBase>(
                    ref ((Diagnostics.Internal.RedisLoggingDefinitions)logger.Definitions).LogTransactionsNotSupported,
                    () => new EventDefinition(
                        logger.Options,
                        RedisEventId.TransactionIgnoredWarning,
                        LogLevel.Warning,
                        "RedisEventId.TransactionIgnoredWarning",
                        level => LoggerMessage.Define(
                            level,
                            RedisEventId.TransactionIgnoredWarning,
                            _resourceManager.GetString("LogTransactionsNotSupported"))));
            }

            return (EventDefinition)definition;
        }
    }
}
